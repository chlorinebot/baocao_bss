'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import styles from './user.module.css';
import 'bootstrap-icons/font/bootstrap-icons.css';

interface UserInfo {
  id: number;
  username: string;
  email: string;
  firstName: string;
  lastName: string;
  birthday?: string;
  role_id: number;
  createdAt: string;
}

interface UserRole {
  role: string;
  scheduleId: number | null;
}

interface UserShift {
  role: string;
  shift: string | null;
  shiftTime: string | null;
  scheduleId: number | null;
}

interface Report {
  id: number;
  id_user: number;
  content: string;
  created_at: string;
}

// Th√™m interface cho quy·ªÅn t·∫°o b√°o c√°o
interface ReportPermission {
  canCreate: boolean;
  reason: string;
  currentShift?: string;
  shiftTime?: string;
  isWorkingTime?: boolean;
}

export default function UserPage() {
  const router = useRouter();
  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);
  const [userRole, setUserRole] = useState<UserRole | null>(null);
  const [userShift, setUserShift] = useState<UserShift | null>(null);
  const [reports, setReports] = useState<Report[]>([]);
  const [loadingReports, setLoadingReports] = useState(false);
  const [filteredReports, setFilteredReports] = useState<Report[]>([]);
  const [dateFilter, setDateFilter] = useState({
    fromDate: '',
    toDate: ''
  });
  const [hasDateFilter, setHasDateFilter] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [activeSection, setActiveSection] = useState('dashboard');
  const [currentTime, setCurrentTime] = useState('');
  const [showEditModal, setShowEditModal] = useState(false);
  const [editForm, setEditForm] = useState({
    email: '',
    firstName: '',
    lastName: '',
    birthday: ''
  });
  const [isUpdating, setIsUpdating] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState('');
  const [toastType, setToastType] = useState<'success' | 'error'>('success');
  
  // Th√™m state cho quy·ªÅn t·∫°o b√°o c√°o
  const [reportPermission, setReportPermission] = useState<ReportPermission | null>(null);
  const [checkingPermission, setCheckingPermission] = useState(false);

  useEffect(() => {
    // C·∫≠p nh·∫≠t th·ªùi gian m·ªói gi√¢y
    const updateTime = () => {
      const now = new Date();
      // Format ng√†y
      const dateString = now.toLocaleDateString('vi-VN', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
      setCurrentTime(dateString);
    };

    updateTime(); // C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c
    const timeInterval = setInterval(updateTime, 1000); // C·∫≠p nh·∫≠t m·ªói gi√¢y

    return () => clearInterval(timeInterval);
  }, []);

  useEffect(() => {
    // Ki·ªÉm tra token v√† l·∫•y th√¥ng tin user
    const token = localStorage.getItem('token');
    const userInfoStr = localStorage.getItem('userInfo');
    
    if (!token || !userInfoStr) {
      router.push('/login');
      return;
    }

    try {
      const userInfo = JSON.parse(userInfoStr);
      
      // Ki·ªÉm tra role - ch·ªâ cho ph√©p user (role_id = 2) truy c·∫≠p
      if (userInfo.role_id === 1) {
        // Admin ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng v·ªÅ dashboard
        router.push('/dashboard');
        return;
      }
      
      if (userInfo.role_id !== 2) {
        // Role kh√¥ng h·ª£p l·ªá
        router.push('/login');
        return;
      }

      // ƒê·∫£m b·∫£o token ƒë∆∞·ª£c l∆∞u trong cookie
      if (token) {
        document.cookie = `token=${token}; path=/; max-age=86400; SameSite=Strict`;
        console.log('üç™ ƒê√£ c·∫≠p nh·∫≠t token trong cookie t·ª´ trang user');
      }

      setUserInfo(userInfo);
      // L·∫•y vai tr√≤ ph√¢n c√¥ng v√† ca tr·ª±c sau khi c√≥ th√¥ng tin user
      fetchUserRole(userInfo.id);
      fetchUserShift(userInfo.id);
      setIsLoading(false);
    } catch (error) {
      console.error('Error parsing user info:', error);
      localStorage.removeItem('token');
      localStorage.removeItem('userInfo');
      router.push('/login');
    }
  }, [router]);

  // H√†m l·∫•y vai tr√≤ ph√¢n c√¥ng c·ªßa user
  const fetchUserRole = async (userId: number) => {
    try {
      const response = await fetch(`http://localhost:3000/work-schedule/user/${userId}/role`);
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setUserRole(data.data);
        }
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y vai tr√≤ ph√¢n c√¥ng:', error);
      setUserRole({ role: 'Ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng', scheduleId: null });
    }
  };

  // H√†m l·∫•y th√¥ng tin ca tr·ª±c hi·ªán t·∫°i
  const fetchUserShift = async (userId: number) => {
    try {
      const response = await fetch(`http://localhost:3000/work-schedule/user/${userId}/current-shift`);
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setUserShift(data.data);
          // Sau khi l·∫•y ƒë∆∞·ª£c th√¥ng tin ca tr·ª±c, ki·ªÉm tra quy·ªÅn t·∫°o b√°o c√°o
          checkReportPermission(userId);
        }
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y th√¥ng tin ca tr·ª±c:', error);
      setUserShift({ role: 'Ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng', shift: null, shiftTime: null, scheduleId: null });
    }
  };

  // Th√™m h√†m ki·ªÉm tra quy·ªÅn t·∫°o b√°o c√°o
  const checkReportPermission = async (userId: number) => {
    setCheckingPermission(true);
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/reports/can-create/${userId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          ...(token && { 'Authorization': `Bearer ${token}` }),
        },
      });

      if (response.ok) {
        const data = await response.json();
        setReportPermission({
          canCreate: data.canCreate || false,
          reason: data.reason || '',
          currentShift: data.currentShift || '',
          shiftTime: data.shiftTime || '',
          isWorkingTime: data.isWorkingTime || false
        });
      } else {
        const errorData = await response.json();
        setReportPermission({
          canCreate: false,
          reason: errorData.error || 'Kh√¥ng th·ªÉ ki·ªÉm tra quy·ªÅn t·∫°o b√°o c√°o',
          currentShift: '',
          shiftTime: '',
          isWorkingTime: false
        });
      }
    } catch (error) {
      console.error('L·ªói khi ki·ªÉm tra quy·ªÅn t·∫°o b√°o c√°o:', error);
      setReportPermission({
        canCreate: false,
        reason: 'L·ªói k·∫øt n·ªëi khi ki·ªÉm tra quy·ªÅn t·∫°o b√°o c√°o',
        currentShift: '',
        shiftTime: '',
        isWorkingTime: false
      });
    } finally {
      setCheckingPermission(false);
    }
  };

  // H√†m l·∫•y l·ªãch s·ª≠ b√°o c√°o c·ªßa user
  const fetchUserReports = async (userId: number) => {
    setLoadingReports(true);
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/reports?user_id=${userId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        setReports(data);
        // Ch·ªâ hi·ªÉn th·ªã 10 b√°o c√°o m·ªõi nh·∫•t khi kh√¥ng c√≥ b·ªô l·ªçc
        setFilteredReports(data.slice(0, 10));
        // Reset b·ªô l·ªçc khi load d·ªØ li·ªáu m·ªõi
        setDateFilter({ fromDate: '', toDate: '' });
        setHasDateFilter(false);
      } else {
        console.error('L·ªói khi l·∫•y b√°o c√°o:', response.status);
        setReports([]);
        setFilteredReports([]);
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y l·ªãch s·ª≠ b√°o c√°o:', error);
      setReports([]);
      setFilteredReports([]);
    } finally {
      setLoadingReports(false);
    }
  };

  // H√†m l·ªçc b√°o c√°o theo ng√†y
  const filterReportsByDate = () => {
    const hasFilter = !!(dateFilter.fromDate || dateFilter.toDate);
    setHasDateFilter(hasFilter);

    if (!hasFilter) {
      // Kh√¥ng c√≥ b·ªô l·ªçc: ch·ªâ hi·ªÉn th·ªã 10 b√°o c√°o m·ªõi nh·∫•t
      setFilteredReports(reports.slice(0, 10));
      return;
    }

    // C√≥ b·ªô l·ªçc: l·ªçc theo ng√†y v√† hi·ªÉn th·ªã t·∫•t c·∫£ k·∫øt qu·∫£
    const filtered = reports.filter(report => {
      const reportDate = new Date(report.created_at);
      const fromDate = dateFilter.fromDate ? new Date(dateFilter.fromDate) : null;
      const toDate = dateFilter.toDate ? new Date(dateFilter.toDate + 'T23:59:59') : null;

      if (fromDate && toDate) {
        return reportDate >= fromDate && reportDate <= toDate;
      } else if (fromDate) {
        return reportDate >= fromDate;
      } else if (toDate) {
        return reportDate <= toDate;
      }
      return true;
    });

    setFilteredReports(filtered);
  };

  // H√†m x√≥a b·ªô l·ªçc
  const clearDateFilter = () => {
    setDateFilter({ fromDate: '', toDate: '' });
    setHasDateFilter(false);
    setFilteredReports(reports.slice(0, 10));
  };

  // H√†m hi·ªÉn th·ªã t·∫•t c·∫£ b√°o c√°o
  const showAllReports = () => {
    setHasDateFilter(true); // ƒê·∫∑t flag ƒë·ªÉ th·ªëng k√™ hi·ªÉn th·ªã ƒë√∫ng
    setFilteredReports(reports);
  };

  // Effect ƒë·ªÉ t·ª± ƒë·ªông l·ªçc khi thay ƒë·ªïi b·ªô l·ªçc
  useEffect(() => {
    filterReportsByDate();
  }, [dateFilter, reports]);

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi b·ªô l·ªçc ng√†y
  const handleDateFilterChange = (field: 'fromDate' | 'toDate', value: string) => {
    setDateFilter(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // H√†m thi·∫øt l·∫≠p b·ªô l·ªçc nhanh
  const setQuickDateFilter = (period: 'today' | 'thisWeek' | 'thisMonth' | 'lastWeek' | 'lastMonth') => {
    const today = new Date();
    const year = today.getFullYear();
    const month = today.getMonth();
    const day = today.getDate();
    
    let fromDate = '';
    let toDate = '';

    switch (period) {
      case 'today':
        fromDate = toDate = today.toISOString().split('T')[0];
        break;
      case 'thisWeek':
        const startOfWeek = new Date(today);
        startOfWeek.setDate(day - today.getDay());
        fromDate = startOfWeek.toISOString().split('T')[0];
        toDate = today.toISOString().split('T')[0];
        break;
      case 'thisMonth':
        fromDate = new Date(year, month, 1).toISOString().split('T')[0];
        toDate = today.toISOString().split('T')[0];
        break;
      case 'lastWeek':
        const lastWeekEnd = new Date(today);
        lastWeekEnd.setDate(day - today.getDay() - 1);
        const lastWeekStart = new Date(lastWeekEnd);
        lastWeekStart.setDate(lastWeekEnd.getDate() - 6);
        fromDate = lastWeekStart.toISOString().split('T')[0];
        toDate = lastWeekEnd.toISOString().split('T')[0];
        break;
      case 'lastMonth':
        const lastMonth = new Date(year, month - 1, 1);
        const lastMonthEnd = new Date(year, month, 0);
        fromDate = lastMonth.toISOString().split('T')[0];
        toDate = lastMonthEnd.toISOString().split('T')[0];
        break;
    }

    setDateFilter({ fromDate, toDate });
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    router.push('/login');
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  const formatDateTime = (dateString: string) => {
    return new Date(dateString).toLocaleString('vi-VN');
  };

  const handleSidebarClick = (section: string) => {
    setActiveSection(section);
    
    // Fetch b√°o c√°o khi chuy·ªÉn sang section report-history
    if (section === 'report-history' && userInfo) {
      fetchUserReports(userInfo.id);
    }
  };

  const handleViewReport = (reportId: number) => {
    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang xem b√°o c√°o
    router.push(`/reports/review?id=${reportId}`);
  };

  const getReportTitle = (content: string, createdAt: string) => {
    try {
      const parsedContent = JSON.parse(content);
      if (parsedContent.date) {
        return `B√°o c√°o ng√†y ${new Date(parsedContent.date).toLocaleDateString('vi-VN')}`;
      }
    } catch (e) {
      // Fallback n·∫øu kh√¥ng parse ƒë∆∞·ª£c content
    }
    return `B√°o c√°o ${formatDate(createdAt)}`;
  };

  const handleEditProfile = () => {
    if (userInfo) {
      setEditForm({
        email: userInfo.email || '',
        firstName: userInfo.firstName || '',
        lastName: userInfo.lastName || '',
        birthday: userInfo.birthday || ''
      });
      setShowEditModal(true);
    }
  };

  const handleSaveProfile = async () => {
    // Validation
    if (!editForm.email || !editForm.firstName || !editForm.lastName) {
      showToastMessage('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc', 'error');
      return;
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(editForm.email)) {
      showToastMessage('Email kh√¥ng h·ª£p l·ªá', 'error');
      return;
    }

    setIsUpdating(true);
    try {
      const token = localStorage.getItem('token');
      if (!token || !userInfo) {
        throw new Error('Kh√¥ng c√≥ token ho·∫∑c th√¥ng tin user');
      }

      const response = await fetch(`http://localhost:3000/users/${userInfo.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          email: editForm.email,
          firstName: editForm.firstName,
          lastName: editForm.lastName,
          birthday: editForm.birthday
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin');
      }

      const updatedUser = await response.json();
      
      // C·∫≠p nh·∫≠t userInfo state
      setUserInfo(prev => ({
        ...prev!,
        email: updatedUser.email,
        firstName: updatedUser.firstName,
        lastName: updatedUser.lastName,
        birthday: updatedUser.birthday
      }));

      // C·∫≠p nh·∫≠t localStorage
      const currentUserInfo = JSON.parse(localStorage.getItem('userInfo') || '{}');
      const newUserInfo = {
        ...currentUserInfo,
        email: updatedUser.email,
        firstName: updatedUser.firstName,
        lastName: updatedUser.lastName,
        birthday: updatedUser.birthday
      };
      localStorage.setItem('userInfo', JSON.stringify(newUserInfo));

      setShowEditModal(false);
      showToastMessage('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!', 'success');
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin';
      
      // N·∫øu l√† l·ªói t·ª´ API, l·∫•y th√¥ng b√°o chi ti·∫øt
      if (error instanceof Error && error.message.includes('fetch')) {
        // L·ªói network
        showToastMessage('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
      } else {
        // L·ªói t·ª´ backend
        showToastMessage(`L·ªói: ${errorMessage}`, 'error');
      }
    } finally {
      setIsUpdating(false);
    }
  };

  const handleCancelEdit = () => {
    setShowEditModal(false);
  };

  const handleInputChange = (field: string, value: string) => {
    setEditForm(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const showToastMessage = (message: string, type: 'success' | 'error') => {
    setToastMessage(message);
    setToastType(type);
    setShowToast(true);
    setTimeout(() => {
      setShowToast(false);
    }, 3000); // ·∫®n toast sau 3 gi√¢y
  };

  // H√†m format th√¥ng tin ca l√†m vi·ªác ƒë·ªÉ hi·ªÉn th·ªã
  const getShiftDisplayInfo = () => {
    if (checkingPermission) {
      return {
        shift: 'ƒêang ki·ªÉm tra...',
        time: '',
        status: 'loading'
      };
    }

    if (!reportPermission || !userShift) {
      return {
        shift: 'Ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng',
        time: '',
        status: 'not-assigned'
      };
    }

    // N·∫øu c√≥ th√¥ng tin ca t·ª´ reportPermission
    if (reportPermission.currentShift && reportPermission.shiftTime) {
      return {
        shift: reportPermission.currentShift,
        time: reportPermission.shiftTime,
        status: reportPermission.isWorkingTime ? 'working' : 'not-working'
      };
    }

    // Fallback t·ª´ userShift
    if (userShift.shift && userShift.shiftTime) {
      return {
        shift: userShift.shift,
        time: userShift.shiftTime,
        status: 'assigned'
      };
    }

    return {
      shift: 'ƒêang ngh·ªâ',
      time: '',
      status: 'off'
    };
  };

  if (isLoading) {
    return (
      <div className={`${styles.container} telsoft-gradient-static`}>
        <div className={styles.loadingContainer}>
          <div className={styles.spinner}></div>
          <p>ƒêang t·∫£i th√¥ng tin...</p>
        </div>
      </div>
    );
  }

  return (
    <div className={`${styles.container} telsoft-gradient-static`}>
      <header className={styles.header}>
        <div className={styles.headerContent}>
          <div className={styles.logoSection}>
            <Image
              src="/img/logo_telsoft.jpg"
              alt="TELSOFT Logo"
              width={120}
              height={48}
              className={styles.logo}
              priority
            />
          </div>
          <div className={styles.headerCenter}>
            <div className={styles.userRoleDisplay}>
              <span className={styles.roleLabel}>Vai tr√≤:</span>
              <span className={styles.roleValue}>
                {userRole?.role || 'ƒêang t·∫£i...'}
              </span>
            </div>
            {(() => {
              const shiftInfo = getShiftDisplayInfo();
              return (
                <div className={styles.shiftDisplay}>
                  <i className="bi bi-clock-history" style={{ marginRight: '8px' }}></i>
                  <span className={styles.shiftLabel}>{shiftInfo.shift}</span>
                  {shiftInfo.time && (
                    <span className={styles.shiftTime}>({shiftInfo.time})</span>
                  )}
                  {shiftInfo.status === 'not-working' && (
                    <span className={styles.shiftStatus} style={{ color: '#dc3545', marginLeft: '8px' }}>
                      - Ch∆∞a ƒë·∫øn gi·ªù l√†m
                    </span>
                  )}
                  {shiftInfo.status === 'working' && (
                    <span className={styles.shiftStatus} style={{ color: '#28a745', marginLeft: '8px' }}>
                      - ƒêang trong ca
                    </span>
                  )}
                  {shiftInfo.status === 'off' && (
                    <span className={styles.shiftStatus} style={{ color: '#6c757d', marginLeft: '8px' }}>
                      - ƒêang ngh·ªâ
                    </span>
                  )}
                </div>
              );
            })()}
            <div className={styles.shiftDisplay}>
              <i className="bi bi-calendar-date" style={{ marginRight: '8px' }}></i>
              <span className={styles.shiftLabel}>Ng√†y</span>
              <span className={styles.shiftTime}>({currentTime} {new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit', second: '2-digit' })})</span>
            </div>
          </div>
          <button onClick={handleLogout} className={styles.logoutButton}>
            ƒêƒÉng Xu·∫•t
          </button>
        </div>
      </header>

      <div className={styles.mainLayout}>
        <aside className={styles.sidebar}>
          <nav className={styles.sidebarNav}>
            <div className={styles.sidebarSection}>
              <h3 className={styles.sidebarTitle}>Menu</h3>
              <ul className={styles.sidebarMenu}>
                <li className={styles.sidebarItem}>
                  <button 
                    className={`${styles.sidebarButton} ${activeSection === 'dashboard' ? styles.active : ''}`}
                    onClick={() => handleSidebarClick('dashboard')}
                  >
                    <i className="bi bi-house-door" style={{ marginRight: '8px' }}></i>
                    <span>Trang ch·ªß</span>
                  </button>
                </li>
                <li className={styles.sidebarItem}>
                  <button 
                    className={`${styles.sidebarButton} ${activeSection === 'create-report' ? styles.active : ''}`}
                    onClick={() => handleSidebarClick('create-report')}
                  >
                    <i className="bi bi-file-earmark-plus" style={{ marginRight: '8px' }}></i>
                    <span>T·∫°o b√°o c√°o</span>
                  </button>
                </li>
                <li className={styles.sidebarItem}>
                  <button 
                    className={`${styles.sidebarButton} ${activeSection === 'report-history' ? styles.active : ''}`}
                    onClick={() => handleSidebarClick('report-history')}
                  >
                    <i className="bi bi-bar-chart-line" style={{ marginRight: '8px' }}></i>
                    <span>L·ªãch s·ª≠ b√°o c√°o</span>
                  </button>
                </li>
                <li className={styles.sidebarItem}>
                  <button 
                    className={`${styles.sidebarButton} ${activeSection === 'profile' ? styles.active : ''}`}
                    onClick={() => handleSidebarClick('profile')}
                  >
                    <i className="bi bi-person-circle" style={{ marginRight: '8px' }}></i>
                    <span>Th√¥ng tin c√° nh√¢n</span>
                  </button>
                </li>
              </ul>
            </div>
          </nav>
        </aside>

        <main className={styles.mainContent}>
          {activeSection === 'dashboard' && (
            <>
              <div className={styles.welcomeCard}>
                <h2 className={styles.welcomeTitle}>
                  Ch√†o m·ª´ng, {userInfo?.firstName} {userInfo?.lastName}!
                </h2>
                <p className={styles.welcomeSubtitle}>
                  ƒê√¢y l√† giao di·ªán d√†nh cho ng∆∞·ªùi d√πng th√¥ng th∆∞·ªùng
                </p>
              </div>

              <div className={styles.contentGrid}>
                <div className={styles.featuresCard}>
                  <h3 className={styles.cardTitle}>Ch·ª©c NƒÉng</h3>
                  <div className={styles.featuresList}>
                    <div className={styles.featureItem}>
                      <div className={styles.featureIcon}><i className="bi bi-file-earmark-plus"></i></div>
                      <div className={styles.featureContent}>
                        <h4>T·∫°o b√°o c√°o</h4>
                        <p>T·∫°o b√°o c√°o m·ªõi cho c√¥ng vi·ªác c·ªßa b·∫°n</p>
                        <button 
                          className={styles.featureButton}
                          onClick={() => setActiveSection('create-report')}
                          disabled={!reportPermission?.canCreate}
                          style={!reportPermission?.canCreate ? { opacity: 0.5, cursor: 'not-allowed' } : {}}
                        >
                          {reportPermission?.canCreate ? 'T·∫°o b√°o c√°o' : 'Kh√¥ng th·ªÉ t·∫°o b√°o c√°o'}
                        </button>
                      </div>
                    </div>

                    <div className={styles.featureItem}>
                      <div className={styles.featureIcon}><i className="bi bi-bar-chart-line"></i></div>
                      <div className={styles.featureContent}>
                        <h4>L·ªãch s·ª≠ b√°o c√°o</h4>
                        <p>Xem v√† qu·∫£n l√Ω c√°c b√°o c√°o ƒë√£ t·∫°o</p>
                        <button 
                          className={styles.featureButton}
                          onClick={() => setActiveSection('report-history')}
                        >
                          Xem l·ªãch s·ª≠
                        </button>
                      </div>
                    </div>

                    <div className={styles.featureItem}>
                      <div className={styles.featureIcon}><i className="bi bi-person-circle"></i></div>
                      <div className={styles.featureContent}>
                        <h4>Th√¥ng tin c√° nh√¢n</h4>
                        <p>C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n</p>
                        <button 
                          className={styles.featureButton}
                          onClick={() => setActiveSection('profile')}
                        >
                          Ch·ªânh s·ª≠a
                        </button>
                      </div>
                    </div>

                    <div className={styles.featureItem}>
                      <div className={styles.featureIcon}><i className="bi bi-shield-lock"></i></div>
                      <div className={styles.featureContent}>
                        <h4>ƒê·ªïi m·∫≠t kh·∫©u</h4>
                        <p>Thay ƒë·ªïi m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o m·∫≠t t√†i kho·∫£n</p>
                        <button className={styles.featureButton}>ƒê·ªïi m·∫≠t kh·∫©u</button>
                      </div>
                    </div>
                  </div>
                </div>

                <div className={styles.helpCard}>
                  <h3 className={styles.cardTitle}>C·∫ßn h·ªó tr·ª£?</h3>
                  <p>
                    N·∫øu b·∫°n g·∫∑p kh√≥ khƒÉn ho·∫∑c c·∫ßn h·ªó tr·ª£, vui l√≤ng s·ª≠ d·ª•ng t√†i li·ªáu h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ho·∫∑c li√™n h·ªá v·ªõi qu·∫£n tr·ªã vi√™n.
                  </p>
                  <div className={styles.helpActions}>
                    <button className={styles.helpButton}>Li√™n h·ªá h·ªó tr·ª£</button>
                    <button className={styles.helpButton}>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</button>
                  </div>
                </div>
              </div>
            </>
          )}

          {activeSection === 'create-report' && (
            <div className={styles.sectionContent}>
              <h2 className={styles.sectionTitle}>T·∫°o b√°o c√°o m·ªõi</h2>

              {/* Th√¥ng b√°o quy·ªÅn t·∫°o b√°o c√°o */}
              {checkingPermission ? (
                <div className={styles.permissionCheck} style={{ 
                  background: '#f8f9fa', 
                  border: '1px solid #dee2e6', 
                  borderRadius: '8px', 
                  padding: '16px', 
                  marginBottom: '20px',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '12px'
                }}>
                  <div className={styles.spinner} style={{ width: '20px', height: '20px' }}></div>
                  <span>ƒêang ki·ªÉm tra quy·ªÅn t·∫°o b√°o c√°o...</span>
                </div>
              ) : reportPermission && !reportPermission.canCreate ? (
                <div className={styles.permissionDenied} style={{ 
                  background: '#f8d7da', 
                  border: '1px solid #f5c6cb', 
                  borderRadius: '8px', 
                  padding: '16px', 
                  marginBottom: '20px',
                  color: '#721c24'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginBottom: '8px' }}>
                    <i className="bi bi-exclamation-triangle-fill" style={{ color: '#dc3545' }}></i>
                    <strong>Kh√¥ng th·ªÉ t·∫°o b√°o c√°o</strong>
                  </div>
                  <p style={{ margin: '0', lineHeight: '1.5' }}>{reportPermission.reason}</p>
                </div>
              ) : reportPermission && reportPermission.canCreate ? (
                <div className={styles.permissionGranted} style={{ 
                  background: '#d1edff', 
                  border: '1px solid #bee5eb', 
                  borderRadius: '8px', 
                  padding: '16px', 
                  marginBottom: '20px',
                  color: '#0c5460'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <i className="bi bi-check-circle-fill" style={{ color: '#28a745' }}></i>
                    <strong>ƒê∆∞·ª£c ph√©p t·∫°o b√°o c√°o</strong>
                  </div>
                  {reportPermission.reason && (
                    <p style={{ margin: '8px 0 0 0', lineHeight: '1.5' }}>{reportPermission.reason}</p>
                  )}
                </div>
              ) : null}

              <div className={styles.reportButtons}>
                <button 
                  className={styles.reportButton}
                  onClick={() => router.push('/reports#apisix')}
                  disabled={!reportPermission?.canCreate}
                  style={!reportPermission?.canCreate ? { opacity: 0.5, cursor: 'not-allowed' } : {}}
                >
                  <i className="bi bi-router" style={{ marginRight: '8px' }}></i>
                  Apache APISIX
                </button>
                <button 
                  className={styles.reportButton}
                  onClick={() => router.push('/reports#node-exporter')}
                  disabled={!reportPermission?.canCreate}
                  style={!reportPermission?.canCreate ? { opacity: 0.5, cursor: 'not-allowed' } : {}}
                >
                  <i className="bi bi-hdd-network" style={{ marginRight: '8px' }}></i>
                  Node Exporter multiple Server Metrics
                </button>
                <button 
                  className={styles.reportButton}
                  onClick={() => router.push('/reports#patroni')}
                  disabled={!reportPermission?.canCreate}
                  style={!reportPermission?.canCreate ? { opacity: 0.5, cursor: 'not-allowed' } : {}}
                >
                  <i className="bi bi-database-check" style={{ marginRight: '8px' }}></i>
                  PostgreSQL Patroni
                </button>
                <button 
                  className={styles.reportButton}
                  onClick={() => router.push('/reports#transactions')}
                  disabled={!reportPermission?.canCreate}
                  style={!reportPermission?.canCreate ? { opacity: 0.5, cursor: 'not-allowed' } : {}}
                >
                  <i className="bi bi-database" style={{ marginRight: '8px' }}></i>
                  PostgreSQL Database
                </button>
                <button 
                  className={styles.reportButton}
                  onClick={() => router.push('/reports#heartbeat')}
                  disabled={!reportPermission?.canCreate}
                  style={!reportPermission?.canCreate ? { opacity: 0.5, cursor: 'not-allowed' } : {}}
                >
                  <i className="bi bi-discord" style={{ marginRight: '8px' }}></i>
                  S·ª≠ d·ª•ng Discord gi√°m s√°t
                </button>
              </div>
              
              {/* Ph·∫ßn C·∫ßn h·ªó tr·ª£? */}
              <div className={styles.helpCard}>
                <h3 className={styles.cardTitle}>C·∫ßn h·ªó tr·ª£?</h3>
                <p>
                  N·∫øu b·∫°n g·∫∑p kh√≥ khƒÉn ho·∫∑c c·∫ßn h·ªó tr·ª£ trong qu√° tr√¨nh t·∫°o b√°o c√°o, vui l√≤ng s·ª≠ d·ª•ng t√†i li·ªáu h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ho·∫∑c li√™n h·ªá v·ªõi qu·∫£n tr·ªã vi√™n.
                </p>
                <div className={styles.helpActions}>
                  <button className={styles.helpButton}>
                    <i className="bi bi-headset me-2"></i>
                    Li√™n h·ªá h·ªó tr·ª£
                  </button>
                  <button className={styles.helpButton}>
                    <i className="bi bi-journal-text me-2"></i>
                    H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
                  </button>
                </div>
              </div>
            </div>
          )}

          {activeSection === 'report-history' && (
            <div className={styles.sectionContent}>
              <h2 className={styles.sectionTitle}>L·ªãch s·ª≠ b√°o c√°o</h2>
              
              {/* B·ªô l·ªçc theo ng√†y */}
              <div className={styles.filterSection}>
                <h3 className={styles.filterTitle}>
                  <i className="bi bi-funnel" style={{ marginRight: '8px' }}></i>
                  L·ªçc theo ng√†y
                </h3>
                <div className={styles.filterControls}>
                  <div className={styles.dateFilter}>
                    <div className={styles.dateInput}>
                      <label className={styles.dateLabel}>T·ª´ ng√†y:</label>
                      <input
                        type="date"
                        className={styles.dateInputField}
                        value={dateFilter.fromDate}
                        onChange={(e) => handleDateFilterChange('fromDate', e.target.value)}
                      />
                    </div>
                    <div className={styles.dateInput}>
                      <label className={styles.dateLabel}>ƒê·∫øn ng√†y:</label>
                      <input
                        type="date"
                        className={styles.dateInputField}
                        value={dateFilter.toDate}
                        onChange={(e) => handleDateFilterChange('toDate', e.target.value)}
                      />
                    </div>
                  </div>
                  
                  {/* Quick filter buttons */}
                  <div className={styles.quickFilters}>
                    <span className={styles.quickFilterLabel}>L·ªçc nhanh:</span>
                    <div className={styles.quickFilterButtons}>
                      <button 
                        className={styles.quickFilterButton}
                        onClick={() => setQuickDateFilter('today')}
                      >
                        H√¥m nay
                      </button>
                      <button 
                        className={styles.quickFilterButton}
                        onClick={() => setQuickDateFilter('thisWeek')}
                      >
                        Tu·∫ßn n√†y
                      </button>
                      <button 
                        className={styles.quickFilterButton}
                        onClick={() => setQuickDateFilter('thisMonth')}
                      >
                        Th√°ng n√†y
                      </button>
                      <button 
                        className={styles.quickFilterButton}
                        onClick={() => setQuickDateFilter('lastWeek')}
                      >
                        Tu·∫ßn tr∆∞·ªõc
                      </button>
                      <button 
                        className={styles.quickFilterButton}
                        onClick={() => setQuickDateFilter('lastMonth')}
                      >
                        Th√°ng tr∆∞·ªõc
                      </button>
                    </div>
                  </div>

                  <div className={styles.filterActions}>
                    <button 
                      className={styles.clearFilterButton}
                      onClick={clearDateFilter}
                      disabled={!dateFilter.fromDate && !dateFilter.toDate}
                    >
                      <i className="bi bi-x-circle" style={{ marginRight: '4px' }}></i>
                      X√≥a b·ªô l·ªçc
                    </button>
                    <div className={styles.filterStats}>
                      {hasDateFilter 
                        ? `Hi·ªÉn th·ªã ${filteredReports.length} / ${reports.length} b√°o c√°o`
                        : `Hi·ªÉn th·ªã ${Math.min(10, reports.length)} b√°o c√°o m·ªõi nh·∫•t / ${reports.length} t·ªïng`
                      }
                    </div>
                  </div>
                </div>
              </div>

              {/* Th√¥ng b√°o hi·ªÉn th·ªã m·∫∑c ƒë·ªãnh */}
              {!hasDateFilter && reports.length > 10 && (
                <div className={styles.defaultViewNotice}>
                  <div className={styles.noticeContent}>
                    <i className="bi bi-info-circle" style={{ marginRight: '8px' }}></i>
                    ƒêang hi·ªÉn th·ªã 10 b√°o c√°o m·ªõi nh·∫•t. S·ª≠ d·ª•ng b·ªô l·ªçc theo ng√†y ƒë·ªÉ xem b√°o c√°o c·ª• th·ªÉ.
                  </div>
                  <button 
                    className={styles.showAllButton}
                    onClick={showAllReports}
                  >
                    <i className="bi bi-list-ul" style={{ marginRight: '4px' }}></i>
                    Xem t·∫•t c·∫£ ({reports.length})
                  </button>
                </div>
              )}

              {loadingReports ? (
                <div className={styles.loadingContainer}>
                  <div className={styles.spinner}></div>
                  <p>ƒêang t·∫£i l·ªãch s·ª≠ b√°o c√°o...</p>
                </div>
              ) : reports.length === 0 ? (
                <div className={styles.emptyState}>
                  <i className="bi bi-file-earmark-text" style={{ fontSize: '48px', color: '#ccc', marginBottom: '16px' }}></i>
                  <p>B·∫°n ch∆∞a c√≥ b√°o c√°o n√†o. H√£y t·∫°o b√°o c√°o m·ªõi!</p>
                  <button 
                    className={styles.createReportButton}
                    onClick={() => setActiveSection('create-report')}
                  >
                    <i className="bi bi-plus-circle" style={{ marginRight: '4px' }}></i>
                    T·∫°o b√°o c√°o m·ªõi
                  </button>
                </div>
              ) : filteredReports.length === 0 ? (
                <div className={styles.emptyState}>
                  <i className="bi bi-search" style={{ fontSize: '48px', color: '#ccc', marginBottom: '16px' }}></i>
                  <p>Kh√¥ng t√¨m th·∫•y b√°o c√°o n√†o trong kho·∫£ng th·ªùi gian n√†y.</p>
                  <p>H√£y th·ª≠ thay ƒë·ªïi b·ªô l·ªçc ho·∫∑c x√≥a b·ªô l·ªçc ƒë·ªÉ xem t·∫•t c·∫£ b√°o c√°o.</p>
                </div>
              ) : (
                <div className={styles.reportList}>
                  {filteredReports.map((report) => (
                    <div key={report.id} className={styles.reportItem}>
                      <div className={styles.reportInfo}>
                        <h4 className={styles.reportTitle}>{getReportTitle(report.content, report.created_at)}</h4>
                        <p className={styles.reportDate}>Ng√†y t·∫°o: {formatDateTime(report.created_at)}</p>
                        <span className={styles.reportStatus}>Tr·∫°ng th√°i: Ho√†n th√†nh</span>
                      </div>
                      <div className={styles.reportActions}>
                        <button className={styles.viewButton} onClick={() => handleViewReport(report.id)}>
                          <i className="bi bi-eye" style={{ marginRight: '4px' }}></i>
                          Xem b√°o c√°o
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeSection === 'profile' && (
            <div className={styles.sectionContent}>
              <h2 className={styles.sectionTitle}>Th√¥ng tin c√° nh√¢n</h2>
              
              <div className={styles.profileInfo}>
                <div className={styles.infoCard}>
                  <div className={styles.cardHeader}>
                    <h3 className={styles.cardTitle}>Th√¥ng Tin C√° Nh√¢n</h3>
                    <button 
                      className={styles.editButton}
                      onClick={handleEditProfile}
                    >
                      <i className="bi bi-pencil-square" style={{ marginRight: '4px' }}></i>
                      S·ª≠a th√¥ng tin
                    </button>
                  </div>
                  <div className={styles.infoGrid}>
                    <div className={styles.infoItem}>
                      <label>T√™n ƒëƒÉng nh·∫≠p:</label>
                      <span>{userInfo?.username}</span>
                    </div>
                    <div className={styles.infoItem}>
                      <label>Email:</label>
                      <span>{userInfo?.email}</span>
                    </div>
                    <div className={styles.infoItem}>
                      <label>H·ªç t√™n:</label>
                      <span>{userInfo?.firstName} {userInfo?.lastName}</span>
                    </div>
                    {userInfo?.birthday && (
                      <div className={styles.infoItem}>
                        <label>Ng√†y sinh:</label>
                        <span>{formatDate(userInfo.birthday)}</span>
                      </div>
                    )}
                    <div className={styles.infoItem}>
                      <label>Ng√†y t·∫°o t√†i kho·∫£n:</label>
                      <span>{formatDate(userInfo?.createdAt || '')}</span>
                    </div>
                    <div className={styles.infoItem}>
                      <label>Vai tr√≤:</label>
                      <span className={styles.roleBadge}>Ng∆∞·ªùi d√πng</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Edit Profile Modal */}
          {showEditModal && (
            <div className={styles.modalOverlay}>
              <div className={styles.modal}>
                <div className={styles.modalHeader}>
                  <h3 className={styles.modalTitle}>Ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n</h3>
                  <button 
                    className={styles.modalCloseButton}
                    onClick={handleCancelEdit}
                  >
                    <i className="bi bi-x-lg"></i>
                  </button>
                </div>
                <div className={styles.modalContent}>
                  <div className={styles.formGroup}>
                    <label className={styles.formLabel}>T√™n ƒëƒÉng nh·∫≠p</label>
                    <input 
                      type="text" 
                      className={styles.formInput}
                      value={userInfo?.username || ''}
                      disabled
                    />
                    <small className={styles.formNote}>T√™n ƒëƒÉng nh·∫≠p kh√¥ng th·ªÉ thay ƒë·ªïi</small>
                  </div>
                  <div className={styles.formGroup}>
                    <label className={styles.formLabel}>Email</label>
                    <input 
                      type="email" 
                      className={styles.formInput}
                      value={editForm.email}
                      onChange={(e) => handleInputChange('email', e.target.value)}
                      disabled={isUpdating}
                      required
                    />
                  </div>
                  <div className={styles.formRow}>
                    <div className={styles.formGroup}>
                      <label className={styles.formLabel}>H·ªç</label>
                      <input 
                        type="text" 
                        className={styles.formInput}
                        value={editForm.firstName}
                        onChange={(e) => handleInputChange('firstName', e.target.value)}
                        disabled={isUpdating}
                        required
                      />
                    </div>
                    <div className={styles.formGroup}>
                      <label className={styles.formLabel}>T√™n</label>
                      <input 
                        type="text" 
                        className={styles.formInput}
                        value={editForm.lastName}
                        onChange={(e) => handleInputChange('lastName', e.target.value)}
                        disabled={isUpdating}
                        required
                      />
                    </div>
                  </div>
                  <div className={styles.formGroup}>
                    <label className={styles.formLabel}>Ng√†y sinh</label>
                    <input 
                      type="date" 
                      className={styles.formInput}
                      value={editForm.birthday}
                      onChange={(e) => handleInputChange('birthday', e.target.value)}
                      disabled={isUpdating}
                    />
                  </div>
                </div>
                <div className={styles.modalFooter}>
                  <button 
                    className={styles.submitButton}
                    onClick={handleSaveProfile}
                    disabled={isUpdating}
                  >
                    {isUpdating ? 'ƒêang c·∫≠p nh·∫≠t...' : 'L∆∞u thay ƒë·ªïi'}
                  </button>
                  <button 
                    className={styles.cancelButton}
                    onClick={handleCancelEdit}
                    disabled={isUpdating}
                  >
                    H·ªßy
                  </button>
                </div>
              </div>
            </div>
          )}
        </main>
      </div>

      {/* Toast Notification */}
      {showToast && (
        <div className={`${styles.toast} ${styles[toastType]} ${showToast ? styles.toastShow : ''}`}>
          <div className={styles.toastContent}>
            <span className={styles.toastIcon}>
              <i className={`bi ${toastType === 'success' ? 'bi-check-circle-fill' : 'bi-exclamation-triangle-fill'}`}></i>
            </span>
            <span className={styles.toastMessage}>{toastMessage}</span>
            <button 
              className={styles.toastClose}
              onClick={() => setShowToast(false)}
            >
              <i className="bi bi-x-lg"></i>
            </button>
          </div>
        </div>
      )}

      <footer className={styles.footer}>
        <div className={styles.footerContent}>
          <p>&copy; 2025 By KimTuan to 
            <span className={styles.footerLogo}>
              <Image
                src="/img/logo_telsoft.jpg"
                alt="TELSOFT Logo"
                width={60}
                height={24}
                className={styles.footerLogoImg}
              />
            </span>
            . All rights reserved.
          </p>
        </div>
      </footer>
    </div>
  );
} 