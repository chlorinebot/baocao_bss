import { Injectable, NotFoundException, BadRequestException, OnModuleInit } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Server } from '../entities/server.entity';

export interface CreateServerDto {
  server_name: string;
  ip: string;
}

export interface UpdateServerDto {
  server_name?: string;
  ip?: string;
}

@Injectable()
export class ServersService implements OnModuleInit {
  constructor(
    @InjectRepository(Server)
    private readonly serverRepository: Repository<Server>,
  ) {}

  // Kh·ªüi t·∫°o khi module ƒë∆∞·ª£c load
  async onModuleInit() {
    await this.fixAutoIncrement();
  }

  // S·ª≠a l·ªói auto increment
  private async fixAutoIncrement() {
    try {
      // Ki·ªÉm tra xem c√≥ server n√†o v·ªõi ID = 0 kh√¥ng
      const serverWithZeroId = await this.serverRepository.findOne({
        where: { id: 0 }
      });

      if (serverWithZeroId) {
        console.log('Found server with ID = 0, fixing auto increment...');
        
        // X√≥a server c√≥ ID = 0
        await this.serverRepository.delete({ id: 0 });
        
        // Reset auto increment v·ªÅ 1
        await this.serverRepository.query('ALTER TABLE nemsm AUTO_INCREMENT = 1');
        
        // T·∫°o l·∫°i server v·ªõi ID t·ª± ƒë·ªông tƒÉng
        const newServer = this.serverRepository.create({
          server_name: serverWithZeroId.server_name,
          ip: serverWithZeroId.ip
        });
        
        await this.serverRepository.save(newServer);
        console.log('Auto increment fixed successfully!');
      } else {
        // ƒê·∫£m b·∫£o auto increment ƒë∆∞·ª£c set ƒë√∫ng
        await this.serverRepository.query('ALTER TABLE nemsm AUTO_INCREMENT = 1');
      }
    } catch (error) {
      console.error('Error fixing auto increment:', error);
    }
  }

  // L·∫•y t·∫•t c·∫£ m√°y ch·ªß
  async findAll(): Promise<Server[]> {
    try {
      return await this.serverRepository.find({
        order: { id: 'ASC' }
      });
    } catch (error) {
      throw new BadRequestException('L·ªói khi t·∫£i danh s√°ch m√°y ch·ªß');
    }
  }

  // L·∫•y m√°y ch·ªß theo ID
  async findOne(id: number): Promise<Server> {
    try {
      const server = await this.serverRepository.findOne({
        where: { id }
      });
      
      if (!server) {
        throw new NotFoundException(`Kh√¥ng t√¨m th·∫•y m√°y ch·ªß v·ªõi ID ${id}`);
      }
      
      return server;
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      throw new BadRequestException('L·ªói khi t√¨m m√°y ch·ªß');
    }
  }

  // T·∫°o m√°y ch·ªß m·ªõi
  async create(createServerDto: CreateServerDto): Promise<Server> {
    try {
      console.log('üì• Nh·∫≠n request t·∫°o server m·ªõi:', createServerDto);
      
      // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!createServerDto.server_name || !createServerDto.ip) {
        console.error('‚ùå Thi·∫øu th√¥ng tin server_name ho·∫∑c ip');
        throw new BadRequestException('T√™n m√°y ch·ªß v√† ƒë·ªãa ch·ªâ IP l√† b·∫Øt bu·ªôc');
      }

      // Ki·ªÉm tra xem t√™n m√°y ch·ªß ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingServerByName = await this.serverRepository.findOne({
        where: { server_name: createServerDto.server_name }
      });
      
      if (existingServerByName) {
        console.error('‚ùå T√™n m√°y ch·ªß ƒë√£ t·ªìn t·∫°i:', createServerDto.server_name);
        throw new BadRequestException('T√™n m√°y ch·ªß ƒë√£ t·ªìn t·∫°i');
      }

      // Ki·ªÉm tra xem IP ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingServerByIP = await this.serverRepository.findOne({
        where: { ip: createServerDto.ip }
      });
      
      if (existingServerByIP) {
        console.error('‚ùå ƒê·ªãa ch·ªâ IP ƒë√£ t·ªìn t·∫°i:', createServerDto.ip);
        throw new BadRequestException('ƒê·ªãa ch·ªâ IP ƒë√£ t·ªìn t·∫°i');
      }

      // Validate IP format
      if (!this.isValidIP(createServerDto.ip)) {
        console.error('‚ùå ƒê·ªãa ch·ªâ IP kh√¥ng h·ª£p l·ªá:', createServerDto.ip);
        throw new BadRequestException('ƒê·ªãa ch·ªâ IP kh√¥ng h·ª£p l·ªá');
      }

      // ƒê·∫£m b·∫£o auto increment ƒë∆∞·ª£c set ƒë√∫ng
      await this.serverRepository.query('ALTER TABLE nemsm AUTO_INCREMENT = 1');

      // T·∫°o server m·ªõi tr·ª±c ti·∫øp qua SQL ƒë·ªÉ ƒë·∫£m b·∫£o ID ƒë∆∞·ª£c t·∫°o ƒë√∫ng
      const result = await this.serverRepository.query(
        'INSERT INTO nemsm (server_name, ip) VALUES (?, ?)',
        [createServerDto.server_name, createServerDto.ip]
      );
      
      // L·∫•y ID c·ªßa server v·ª´a t·∫°o
      const insertId = result.insertId;
      console.log('‚úÖ Server ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi ID:', insertId);
      
      // L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa server v·ª´a t·∫°o
      const newServer = await this.serverRepository.findOne({
        where: { id: insertId }
      });
      
      if (!newServer) {
        throw new Error(`Kh√¥ng th·ªÉ t√¨m th·∫•y server v·ª´a t·∫°o v·ªõi ID ${insertId}`);
      }
      
      console.log('‚úÖ Th√¥ng tin ƒë·∫ßy ƒë·ªß c·ªßa server v·ª´a t·∫°o:', newServer);
      return newServer;
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o m√°y ch·ªß m·ªõi:', error);
      if (error instanceof BadRequestException) {
        throw error;
      }
      throw new BadRequestException('L·ªói khi t·∫°o m√°y ch·ªß m·ªõi: ' + (error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'));
    }
  }

  // C·∫≠p nh·∫≠t m√°y ch·ªß
  async update(id: number, updateServerDto: UpdateServerDto): Promise<Server> {
    try {
      const server = await this.findOne(id);
      
      // Ki·ªÉm tra t√™n m√°y ch·ªß tr√πng l·∫∑p (n·∫øu c√≥ thay ƒë·ªïi)
      if (updateServerDto.server_name && updateServerDto.server_name !== server.server_name) {
        const existingServerByName = await this.serverRepository.findOne({
          where: { server_name: updateServerDto.server_name }
        });
        
        if (existingServerByName) {
          throw new BadRequestException('T√™n m√°y ch·ªß ƒë√£ t·ªìn t·∫°i');
        }
      }

      // Ki·ªÉm tra IP tr√πng l·∫∑p (n·∫øu c√≥ thay ƒë·ªïi)
      if (updateServerDto.ip && updateServerDto.ip !== server.ip) {
        const existingServerByIP = await this.serverRepository.findOne({
          where: { ip: updateServerDto.ip }
        });
        
        if (existingServerByIP) {
          throw new BadRequestException('ƒê·ªãa ch·ªâ IP ƒë√£ t·ªìn t·∫°i');
        }

        // Validate IP format
        if (!this.isValidIP(updateServerDto.ip)) {
          throw new BadRequestException('ƒê·ªãa ch·ªâ IP kh√¥ng h·ª£p l·ªá');
        }
      }

      // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng
      Object.assign(server, updateServerDto);
      return await this.serverRepository.save(server);
    } catch (error) {
      if (error instanceof NotFoundException || error instanceof BadRequestException) {
        throw error;
      }
      throw new BadRequestException('L·ªói khi c·∫≠p nh·∫≠t m√°y ch·ªß');
    }
  }

  // X√≥a m√°y ch·ªß
  async remove(id: number): Promise<{ success: boolean; message: string }> {
    try {
      const server = await this.findOne(id);
      
      await this.serverRepository.remove(server);
      
      return {
        success: true,
        message: 'X√≥a m√°y ch·ªß th√†nh c√¥ng'
      };
    } catch (error) {
      if (error instanceof NotFoundException) {
        throw error;
      }
      throw new BadRequestException('L·ªói khi x√≥a m√°y ch·ªß');
    }
  }

  // ƒê·∫øm t·ªïng s·ªë m√°y ch·ªß
  async count(): Promise<number> {
    try {
      return await this.serverRepository.count();
    } catch (error) {
      throw new BadRequestException('L·ªói khi ƒë·∫øm m√°y ch·ªß');
    }
  }

  // Validate IP address format
  private isValidIP(ip: string): boolean {
    const ipRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    return ipRegex.test(ip);
  }
} 