import { Injectable, BadRequestException, ForbiddenException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Report } from './report.entity';
import { WorkScheduleService } from '../work-schedule/work-schedule.service';

@Injectable()
export class ReportsService {
  constructor(
    @InjectRepository(Report)
    private readonly reportRepository: Repository<Report>,
    private readonly workScheduleService: WorkScheduleService,
  ) {}

  /**
   * Ki·ªÉm tra xem nh√¢n vi√™n c√≥ quy·ªÅn t·∫°o b√°o c√°o kh√¥ng d·ª±a tr√™n ca l√†m vi·ªác
   */
  async canCreateReport(userId: number): Promise<{
    canCreate: boolean;
    reason?: string;
    currentShift?: string;
    shiftTime?: string;
    isWorkingTime?: boolean;
  }> {
    try {
      console.log(`üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra quy·ªÅn t·∫°o b√°o c√°o cho user ID: ${userId}`);
      
      // L·∫•y th√¥ng tin ph√¢n c√¥ng ca l√†m vi·ªác c·ªßa nh√¢n vi√™n trong ng√†y h√¥m nay
      const today = new Date();
      console.log(`üìÖ Ki·ªÉm tra cho ng√†y: ${today.toISOString().split('T')[0]}`);
      
      const userSchedule = await this.workScheduleService.getUserScheduleForDate(userId, today);
      console.log(`üë§ Th√¥ng tin l·ªãch l√†m vi·ªác c·ªßa user:`, JSON.stringify(userSchedule, null, 2));
      
      if (!userSchedule.isAssigned) {
        console.log('‚ùå User ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng ca l√†m vi·ªác');
        return {
          canCreate: false,
          reason: 'Nh√¢n vi√™n ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng ca l√†m vi·ªác cho ng√†y h√¥m nay',
          isWorkingTime: false
        };
      }

      const now = new Date();
      const currentHour = now.getHours();
      const currentMinute = now.getMinutes();
      const currentTime = currentHour * 60 + currentMinute; // T·ªïng s·ªë ph√∫t t·ª´ 00:00
      
      console.log(`‚è∞ Th·ªùi gian hi·ªán t·∫°i: ${currentHour}:${currentMinute.toString().padStart(2, '0')} (${currentTime} ph√∫t)`);

      // T√¨m ca l√†m vi·ªác hi·ªán t·∫°i t·ª´ danh s√°ch ca ƒë∆∞·ª£c ph√¢n c√¥ng
      let currentShiftInfo = userSchedule.assignedShifts.find(shift => shift.isCurrentShift);
      console.log(`üéØ Ca l√†m vi·ªác hi·ªán t·∫°i:`, currentShiftInfo);
      
      if (!currentShiftInfo) {
        console.log('üîÑ Kh√¥ng c√≥ ca hi·ªán t·∫°i, ki·ªÉm tra th·ªùi gian gia h·∫°n...');
        // Ki·ªÉm tra xem c√≥ ƒëang trong th·ªùi gian cho ph√©p t·∫°o b√°o c√°o kh√¥ng (30 ph√∫t sau ca)
        let canCreateInExtendedTime = false;
        let extendedShiftInfo: {
          shiftType: 'morning' | 'afternoon' | 'evening';
          shiftName: string;
          shiftTime: string;
          isCurrentShift: boolean;
        } | undefined = undefined;

        for (const shift of userSchedule.assignedShifts) {
          let shiftEnd: number;
          let allowedEndTime: number;

          if (shift.shiftType === 'morning') {
            shiftEnd = 14 * 60; // 14:00
            allowedEndTime = shiftEnd + 30; // 14:30
            console.log(`üìã Ki·ªÉm tra ca s√°ng: k·∫øt th√∫c ${shiftEnd}, cho ph√©p ƒë·∫øn ${allowedEndTime}, hi·ªán t·∫°i ${currentTime}`);
            if (currentTime <= allowedEndTime && currentTime >= shiftEnd) {
              canCreateInExtendedTime = true;
              extendedShiftInfo = shift;
              console.log('‚úÖ Trong th·ªùi gian gia h·∫°n ca s√°ng');
              break;
            }
          } else if (shift.shiftType === 'afternoon') {
            shiftEnd = 22 * 60; // 22:00
            allowedEndTime = shiftEnd + 30; // 22:30
            console.log(`üìã Ki·ªÉm tra ca chi·ªÅu: k·∫øt th√∫c ${shiftEnd}, cho ph√©p ƒë·∫øn ${allowedEndTime}, hi·ªán t·∫°i ${currentTime}`);
            if (currentTime <= allowedEndTime && currentTime >= shiftEnd) {
              canCreateInExtendedTime = true;
              extendedShiftInfo = shift;
              console.log('‚úÖ Trong th·ªùi gian gia h·∫°n ca chi·ªÅu');
              break;
            }
          } else if (shift.shiftType === 'evening') {
            // Ca ƒë√™m ƒë·∫∑c bi·ªát: k·∫øt th√∫c 06:00 s√°ng h√¥m sau
            console.log(`üìã Ki·ªÉm tra ca ƒë√™m: gi·ªù hi·ªán t·∫°i ${currentHour}:${currentMinute}`);
            if (currentHour < 6 || (currentHour === 6 && currentMinute <= 30)) {
              // ƒêang trong th·ªùi gian 00:00 - 06:30
              canCreateInExtendedTime = true;
              extendedShiftInfo = shift;
              console.log('‚úÖ Trong th·ªùi gian gia h·∫°n ca ƒë√™m');
              break;
            }
          }
        }

        if (!canCreateInExtendedTime) {
          // Ki·ªÉm tra n·∫øu user ngh·ªâ ng√†y h√¥m nay
          if (userSchedule.assignedShifts.length === 0) {
            console.log('üò¥ User ngh·ªâ ng√†y h√¥m nay');
            return {
              canCreate: false,
              reason: 'B·∫°n ƒë∆∞·ª£c ngh·ªâ ng√†y h√¥m nay theo l·ªãch lu√¢n phi√™n. Kh√¥ng th·ªÉ t·∫°o b√°o c√°o.',
              currentShift: 'Ngh·ªâ',
              shiftTime: 'Ngh·ªâ ng√†y h√¥m nay',
              isWorkingTime: false
            };
          }

          // T·∫°o danh s√°ch th·ªùi gian cho ph√©p
          const allowedTimes = userSchedule.assignedShifts.map(shift => {
            if (shift.shiftType === 'morning') {
              return '06:00 - 14:30';
            } else if (shift.shiftType === 'afternoon') {
              return '14:00 - 22:30';
            } else {
              return '22:00 - 06:30 (h√¥m sau)';
            }
          }).join(', ');
          
          console.log(`‚ùå Ngo√†i th·ªùi gian cho ph√©p. Th·ªùi gian h·ª£p l·ªá: ${allowedTimes}`);

          return {
            canCreate: false,
            reason: `Ch·ªâ ƒë∆∞·ª£c ph√©p t·∫°o b√°o c√°o trong ca l√†m vi·ªác v√† 30 ph√∫t sau ca. Th·ªùi gian cho ph√©p: ${allowedTimes}`,
            currentShift: userSchedule.assignedShifts[0]?.shiftName,
            shiftTime: userSchedule.assignedShifts[0]?.shiftTime,
            isWorkingTime: false
          };
        }

        // ƒêang trong th·ªùi gian gia h·∫°n (30 ph√∫t sau ca)
        currentShiftInfo = extendedShiftInfo;
        console.log('‚è∞ S·ª≠ d·ª•ng th√¥ng tin ca gia h·∫°n:', currentShiftInfo);
      }

      // Ki·ªÉm tra currentShiftInfo kh√¥ng null
      if (!currentShiftInfo) {
        console.log('‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ca l√†m vi·ªác hi·ªán t·∫°i');
        return {
          canCreate: false,
          reason: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ca l√†m vi·ªác hi·ªán t·∫°i',
          isWorkingTime: false
        };
      }

      // X√°c ƒë·ªãnh lo·∫°i ca ƒë·ªÉ ki·ªÉm tra b√°o c√°o ƒë√£ t·ªìn t·∫°i
      const shiftType: 'morning' | 'afternoon' | 'evening' = currentShiftInfo.shiftType;
      console.log(`üéØ Ki·ªÉm tra b√°o c√°o ƒë√£ t·ªìn t·∫°i cho ca: ${shiftType}`);

      // Ki·ªÉm tra xem ƒë√£ t·∫°o b√°o c√°o cho ca n√†y ch∆∞a
      const todayStart = new Date();
      todayStart.setHours(0, 0, 0, 0);
      
      const existingReport = await this.reportRepository.findOne({
        where: {
          id_user: userId,
          shift_type: shiftType,
          shift_date: todayStart
        }
      });

      console.log(`üìã B√°o c√°o ƒë√£ t·ªìn t·∫°i:`, existingReport ? `ID: ${existingReport.id}` : 'Ch∆∞a c√≥');

      if (existingReport) {
        console.log(`‚ùå ƒê√£ t·∫°o b√°o c√°o cho ${currentShiftInfo.shiftName}`);
        return {
          canCreate: false,
          reason: `ƒê√£ t·∫°o b√°o c√°o cho ${currentShiftInfo.shiftName} h√¥m nay. M·ªói ca ch·ªâ ƒë∆∞·ª£c t·∫°o b√°o c√°o m·ªôt l·∫ßn.`,
          currentShift: currentShiftInfo.shiftName,
          shiftTime: currentShiftInfo.shiftTime,
          isWorkingTime: currentShiftInfo.isCurrentShift
        };
      }

      console.log(`‚úÖ ƒê∆∞·ª£c ph√©p t·∫°o b√°o c√°o cho ${currentShiftInfo.shiftName}`);

      return {
        canCreate: true,
        reason: `ƒê∆∞·ª£c ph√©p t·∫°o b√°o c√°o cho ${currentShiftInfo.shiftName}`,
        currentShift: currentShiftInfo.shiftName,
        shiftTime: currentShiftInfo.shiftTime,
        isWorkingTime: currentShiftInfo.isCurrentShift
      };

    } catch (error) {
      console.error('‚ùå L·ªói khi ki·ªÉm tra quy·ªÅn t·∫°o b√°o c√°o:', error);
      console.error('‚ùå Chi ti·∫øt l·ªói:', {
        message: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined
      });
      return {
        canCreate: false,
        reason: 'L·ªói h·ªá th·ªëng khi ki·ªÉm tra quy·ªÅn t·∫°o b√°o c√°o',
        isWorkingTime: false
      };
    }
  }

  /**
   * D·ªãch lo·∫°i ca sang ti·∫øng Vi·ªát
   */
  private translateShiftType(shiftType: 'morning' | 'afternoon' | 'evening'): string {
    switch (shiftType) {
      case 'morning': return 's√°ng';
      case 'afternoon': return 'chi·ªÅu';
      case 'evening': return 't·ªëi';
      default: return shiftType;
    }
  }

  async createReport(id_user: number, content: string): Promise<Report> {
    console.log(`üöÄ B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o cho user ID: ${id_user}`);
    console.log(`üìù N·ªôi dung b√°o c√°o:`, content?.substring(0, 200) + (content?.length > 200 ? '...' : ''));
    
    try {
    // Ki·ªÉm tra quy·ªÅn t·∫°o b√°o c√°o
    const permissionCheck = await this.canCreateReport(id_user);
      console.log(`üîê K·∫øt qu·∫£ ki·ªÉm tra quy·ªÅn:`, permissionCheck);
    
    if (!permissionCheck.canCreate) {
        console.log(`‚ùå T·ª´ ch·ªëi t·∫°o b√°o c√°o: ${permissionCheck.reason}`);
      throw new ForbiddenException(permissionCheck.reason);
    }

      // L·∫•y th√¥ng tin ca l√†m vi·ªác th·ª±c t·∫ø t·ª´ user schedule
      const today = new Date();
      const userSchedule = await this.workScheduleService.getUserScheduleForDate(id_user, today);
      
      // T√¨m ca l√†m vi·ªác hi·ªán t·∫°i t·ª´ assignedShifts
      const currentShift = userSchedule.assignedShifts.find(shift => shift.isCurrentShift);
      
      if (!currentShift) {
        // N·∫øu kh√¥ng c√≥ ca hi·ªán t·∫°i, ki·ªÉm tra th·ªùi gian gia h·∫°n
        const now = new Date();
        const currentHour = now.getHours();
        const currentMinute = now.getMinutes();
        const currentTime = currentHour * 60 + currentMinute;
        
        // T√¨m ca v·ª´a k·∫øt th√∫c (trong th·ªùi gian gia h·∫°n 30 ph√∫t)
        for (const shift of userSchedule.assignedShifts) {
          let shiftEnd: number;
          let allowedEndTime: number;

          if (shift.shiftType === 'morning') {
            shiftEnd = 14 * 60; // 14:00
            allowedEndTime = shiftEnd + 30; // 14:30
            if (currentTime <= allowedEndTime && currentTime >= shiftEnd) {
              console.log(`‚è∞ S·ª≠ d·ª•ng ca s√°ng (th·ªùi gian gia h·∫°n) cho b√°o c√°o`);
              const shiftDate = new Date();
              shiftDate.setHours(0, 0, 0, 0);
              
              const report = this.reportRepository.create({ 
                id_user, 
                content,
                shift_type: 'morning',
                shift_date: shiftDate
              });
              
              console.log(`üíæ ƒêang l∆∞u b√°o c√°o v√†o database...`);
              const savedReport = await this.reportRepository.save(report);
              console.log(`‚úÖ L∆∞u b√°o c√°o th√†nh c√¥ng v·ªõi ID: ${savedReport.id}`);
              return savedReport;
            }
          } else if (shift.shiftType === 'afternoon') {
            shiftEnd = 22 * 60; // 22:00
            allowedEndTime = shiftEnd + 30; // 22:30
            if (currentTime <= allowedEndTime && currentTime >= shiftEnd) {
              console.log(`‚è∞ S·ª≠ d·ª•ng ca chi·ªÅu (th·ªùi gian gia h·∫°n) cho b√°o c√°o`);
              const shiftDate = new Date();
              shiftDate.setHours(0, 0, 0, 0);
              
              const report = this.reportRepository.create({ 
                id_user, 
                content,
                shift_type: 'afternoon',
                shift_date: shiftDate
              });
              
              console.log(`üíæ ƒêang l∆∞u b√°o c√°o v√†o database...`);
              const savedReport = await this.reportRepository.save(report);
              console.log(`‚úÖ L∆∞u b√°o c√°o th√†nh c√¥ng v·ªõi ID: ${savedReport.id}`);
              return savedReport;
            }
          } else if (shift.shiftType === 'evening') {
            // Ca ƒë√™m ƒë·∫∑c bi·ªát: k·∫øt th√∫c 06:00 s√°ng h√¥m sau
            if (currentHour < 6 || (currentHour === 6 && currentMinute <= 30)) {
              console.log(`‚è∞ S·ª≠ d·ª•ng ca ƒë√™m (th·ªùi gian gia h·∫°n) cho b√°o c√°o`);
    const shiftDate = new Date();
    shiftDate.setHours(0, 0, 0, 0);
              
              const report = this.reportRepository.create({ 
                id_user, 
                content,
                shift_type: 'evening',
                shift_date: shiftDate
              });
              
              console.log(`üíæ ƒêang l∆∞u b√°o c√°o v√†o database...`);
              const savedReport = await this.reportRepository.save(report);
              console.log(`‚úÖ L∆∞u b√°o c√°o th√†nh c√¥ng v·ªõi ID: ${savedReport.id}`);
              return savedReport;
            }
          }
        }
        
        throw new ForbiddenException('Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ca l√†m vi·ªác ƒë·ªÉ t·∫°o b√°o c√°o');
      }

      // S·ª≠ d·ª•ng ca l√†m vi·ªác hi·ªán t·∫°i t·ª´ rotation logic
      const shiftType = currentShift.shiftType;
      const shiftDate = new Date();
      shiftDate.setHours(0, 0, 0, 0);
      
      console.log(`‚è∞ Lo·∫°i ca hi·ªán t·∫°i t·ª´ rotation: ${shiftType}`);
      console.log(`üìÖ Ng√†y ca: ${shiftDate.toISOString().split('T')[0]}`);

    const report = this.reportRepository.create({ 
      id_user, 
      content,
      shift_type: shiftType,
      shift_date: shiftDate
    });
    
      console.log(`üíæ ƒêang l∆∞u b√°o c√°o v√†o database...`);
      
      const savedReport = await this.reportRepository.save(report);
      console.log(`‚úÖ L∆∞u b√°o c√°o th√†nh c√¥ng v·ªõi ID: ${savedReport.id}`);
      
      return savedReport;
    } catch (error) {
      console.error(`‚ùå L·ªói khi t·∫°o b√°o c√°o cho user ${id_user}:`, error);
      console.error(`‚ùå Chi ti·∫øt l·ªói:`, {
        message: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        name: error instanceof Error ? error.name : 'Unknown'
      });
      
      // Re-throw the error to maintain existing behavior
      throw error;
    }
  }

  async getAllReports(): Promise<Report[]> {
    return this.reportRepository.find({ order: { created_at: 'DESC' } });
  }

  async getReportsByUserId(userId: number): Promise<Report[]> {
    return this.reportRepository.find({ 
      where: { id_user: userId },
      order: { created_at: 'DESC' } 
    });
  }

  /**
   * L·∫•y b√°o c√°o theo ca l√†m vi·ªác
   */
  async getReportsByShift(shiftType: 'morning' | 'afternoon' | 'evening', date?: Date): Promise<Report[]> {
    const queryDate = date || new Date();
    queryDate.setHours(0, 0, 0, 0);

    return this.reportRepository.find({
      where: {
        shift_type: shiftType,
        shift_date: queryDate
      },
      order: { created_at: 'DESC' }
    });
  }
} 